Interrupt Vectors
    00000 C023      RJMP	__text_start|__start
    00004 C294      RJMP	_timer2_ovf_isf
    00009 C21A      RJMP	_timer0_ovf_isr

Program Code (text area)
__text_start|__start:
    00024 E5CF      LDI	R28,0x5F
    00025 E0D4      LDI	R29,4
    00026 BFCD      OUT	0x3D,R28
    00027 BFDE      OUT	0x3E,R29
    00028 51CE      SUBI	R28,0x1E
    00029 40D0      SBCI	R29,0
    0002A EA0A      LDI	R16,0xAA
    0002B 8308      ST	Y,R16
    0002C 2400      CLR	R0
    0002D E8E2      LDI	R30,0x82
    0002E E0F0      LDI	R31,0
    0002F E010      LDI	R17,0
    00030 38E2      CPI	R30,0x82
    00031 07F1      CPC	R31,R17
    00032 F011      BEQ	0x0035
    00033 9201      ST	Z+,R0
    00034 CFFB      RJMP	0x0030
    00035 8300      ST	Z,R16
    00036 E2E6      LDI	R30,0x26
    00037 E0F0      LDI	R31,0
    00038 E6A0      LDI	R26,0x60
    00039 E0B0      LDI	R27,0
    0003A E010      LDI	R17,0
    0003B E000      LDI	R16,0
    0003C BF0B      OUT	0x3B,R16
    0003D 34E8      CPI	R30,0x48
    0003E 07F1      CPC	R31,R17
    0003F F021      BEQ	0x0044
    00040 95C8      LPM
    00041 9631      ADIW	R30,1
    00042 920D      ST	X+,R0
    00043 CFF9      RJMP	0x003D
    00044 D2C5      RCALL	_main
_exit:
    00045 CFFF      RJMP	_exit
_btn2_1:
  i                    --> R20
    00046 934A      ST	-Y,R20
    00047 935A      ST	-Y,R21
FILE: E:\1、附件-M8\atmega8_p5\main.c
(0001) //ICC-AVR application builder
(0002) //atmega8_p4
(0003) /*
(0004) 	功能：計時器 
(0005) 		S1按鈕：七段功能依序(七段繞圈圈檢測)
(0006) 		S2按鈕：
(0007) 				第一下：顯示目前日期（月，日）
(0008) 				第二下：顯示目前時間（時，分）
(0009) 				第三下：由0000計數到0010（間隔一秒），結束計數時回到S1按鈕功能
(0010) */ 
(0011) 
(0012) #include<iom8v.h>
(0013) #include<macros.h>
(0014) 
(0015) #define S_1      PORTC &= ~BIT(0);PORTC|=BIT(1) ;PORTC|=BIT(2) ;PORTC|=BIT(3); 
(0016) #define S_2      PORTC |= BIT(0) ;PORTC&=~BIT(1);PORTC|=BIT(2) ;PORTC|=BIT(3);
(0017) #define S_3      PORTC |= BIT(0) ;PORTC|=BIT(1) ;PORTC&=~BIT(2);PORTC|=BIT(3);  
(0018) #define S_4      PORTC |= BIT(0) ;PORTC|=BIT(1) ;PORTC|=BIT(2) ;PORTC&=~BIT(3);
(0019) #define S_OFF    PORTC |= BIT(0) ;PORTC|=BIT(1) ;PORTC|=BIT(2) ;PORTC|=BIT(3);  
(0020) #define S_ON     PORTC &= ~BIT(0);PORTC&=~BIT(1);PORTC&=~BIT(2);PORTC&=~BIT(3);
(0021) 
(0022) unsigned int seg[10] = 
(0023) {
(0024) 	0x3f,0x06,0x5b,0x4f,
(0025) 	0x66,0x6d,0x7d,0x07,
(0026) 	0x7f,0x6f
(0027) };
(0028) 
(0029) //初始化 變量 聲明//////////////////////////////////////////////////////////////
(0030) int data = 0;
(0031) int data2 = 0;
(0032) 
(0033) int count = 1;
(0034) int count_num = 1;
(0035) int btn2_count = 1;
(0036) int btn2_3_count = 0;
(0037) int btn2_3_flag = 0;
(0038) 
(0039) void btn2_1(void)
(0040) {
(0041) 	int i = 0;
(0042) 	S_OFF;
    00048 9AA8      SBI	0x15,0
    00049 9AA9      SBI	0x15,1
    0004A 9AAA      SBI	0x15,2
    0004B 9AAB      SBI	0x15,3
(0043) 	for(i = 0;i<500;i++)
    0004C 2744      CLR	R20
    0004D 2755      CLR	R21
(0044) 	{
(0045) 	PORTD = seg[0];S_1;
    0004E 9020 0060 LDS	R2,seg
    00050 9030 0061 LDS	R3,seg+1
    00052 BA22      OUT	0x12,R2
    00053 98A8      CBI	0x15,0
    00054 9AA9      SBI	0x15,1
    00055 9AAA      SBI	0x15,2
    00056 9AAB      SBI	0x15,3
(0046) 	delay_ms(1);
    00057 E001      LDI	R16,1
    00058 E010      LDI	R17,0
    00059 D17A      RCALL	_delay_ms
(0047) 	PORTD = seg[7];S_2;
    0005A 9020 006E LDS	R2,seg+14
    0005C 9030 006F LDS	R3,seg+15
    0005E BA22      OUT	0x12,R2
    0005F 9AA8      SBI	0x15,0
    00060 98A9      CBI	0x15,1
    00061 9AAA      SBI	0x15,2
    00062 9AAB      SBI	0x15,3
(0048) 	delay_ms(1);
    00063 E001      LDI	R16,1
    00064 E010      LDI	R17,0
    00065 D16E      RCALL	_delay_ms
(0049) 	PORTD = seg[2];S_3;
    00066 9020 0064 LDS	R2,seg+4
    00068 9030 0065 LDS	R3,seg+5
    0006A BA22      OUT	0x12,R2
    0006B 9AA8      SBI	0x15,0
    0006C 9AA9      SBI	0x15,1
    0006D 98AA      CBI	0x15,2
    0006E 9AAB      SBI	0x15,3
(0050) 	delay_ms(1);
    0006F E001      LDI	R16,1
    00070 E010      LDI	R17,0
    00071 D162      RCALL	_delay_ms
(0051) 	PORTD = seg[4];S_4;
    00072 9020 0068 LDS	R2,seg+8
    00074 9030 0069 LDS	R3,seg+9
    00076 BA22      OUT	0x12,R2
    00077 9AA8      SBI	0x15,0
    00078 9AA9      SBI	0x15,1
    00079 9AAA      SBI	0x15,2
    0007A 98AB      CBI	0x15,3
(0052) 	delay_ms(1);
    0007B E001      LDI	R16,1
    0007C E010      LDI	R17,0
    0007D D156      RCALL	_delay_ms
    0007E 5F4F      SUBI	R20,0xFF
    0007F 4F5F      SBCI	R21,0xFF
    00080 3F44      CPI	R20,0xF4
    00081 E0E1      LDI	R30,1
    00082 075E      CPC	R21,R30
    00083 F254      BLT	0x004E
(0053) 	}
(0054) 	S_OFF;
    00084 9AA8      SBI	0x15,0
    00085 9AA9      SBI	0x15,1
    00086 9AAA      SBI	0x15,2
    00087 9AAB      SBI	0x15,3
(0055) 	btn2_count = 2;
    00088 E082      LDI	R24,2
    00089 E090      LDI	R25,0
    0008A 9390 007D STS	btn2_count+1,R25
    0008C 9380 007C STS	btn2_count,R24
    0008E 9159      LD	R21,Y+
    0008F 9149      LD	R20,Y+
    00090 9508      RET
_btn2_2:
  i                    --> R20
    00091 934A      ST	-Y,R20
    00092 935A      ST	-Y,R21
(0056) }
(0057) 
(0058) void btn2_2(void)
(0059) {
(0060) 	int i = 0;
(0061) 	S_OFF;
    00093 9AA8      SBI	0x15,0
    00094 9AA9      SBI	0x15,1
    00095 9AAA      SBI	0x15,2
    00096 9AAB      SBI	0x15,3
(0062) 	for(i = 0;i<500;i++)
    00097 2744      CLR	R20
    00098 2755      CLR	R21
(0063) 	{
(0064) 	PORTD = seg[0];S_1;
    00099 9020 0060 LDS	R2,seg
    0009B 9030 0061 LDS	R3,seg+1
    0009D BA22      OUT	0x12,R2
    0009E 98A8      CBI	0x15,0
    0009F 9AA9      SBI	0x15,1
    000A0 9AAA      SBI	0x15,2
    000A1 9AAB      SBI	0x15,3
(0065) 	delay_ms(1);
    000A2 E001      LDI	R16,1
    000A3 E010      LDI	R17,0
    000A4 D12F      RCALL	_delay_ms
(0066) 	PORTD = seg[2];S_2;
    000A5 9020 0064 LDS	R2,seg+4
    000A7 9030 0065 LDS	R3,seg+5
    000A9 BA22      OUT	0x12,R2
    000AA 9AA8      SBI	0x15,0
    000AB 98A9      CBI	0x15,1
    000AC 9AAA      SBI	0x15,2
    000AD 9AAB      SBI	0x15,3
(0067) 	delay_ms(1);
    000AE E001      LDI	R16,1
    000AF E010      LDI	R17,0
    000B0 D123      RCALL	_delay_ms
(0068) 	PORTD = seg[5];S_3;
    000B1 9020 006A LDS	R2,seg+10
    000B3 9030 006B LDS	R3,seg+11
    000B5 BA22      OUT	0x12,R2
    000B6 9AA8      SBI	0x15,0
    000B7 9AA9      SBI	0x15,1
    000B8 98AA      CBI	0x15,2
    000B9 9AAB      SBI	0x15,3
(0069) 	delay_ms(1);
    000BA E001      LDI	R16,1
    000BB E010      LDI	R17,0
    000BC D117      RCALL	_delay_ms
(0070) 	PORTD = seg[6];S_4;
    000BD 9020 006C LDS	R2,seg+12
    000BF 9030 006D LDS	R3,seg+13
    000C1 BA22      OUT	0x12,R2
    000C2 9AA8      SBI	0x15,0
    000C3 9AA9      SBI	0x15,1
    000C4 9AAA      SBI	0x15,2
    000C5 98AB      CBI	0x15,3
(0071) 	delay_ms(1);
    000C6 E001      LDI	R16,1
    000C7 E010      LDI	R17,0
    000C8 D10B      RCALL	_delay_ms
    000C9 5F4F      SUBI	R20,0xFF
    000CA 4F5F      SBCI	R21,0xFF
    000CB 3F44      CPI	R20,0xF4
    000CC E0E1      LDI	R30,1
    000CD 075E      CPC	R21,R30
    000CE F254      BLT	0x0099
(0072) 	}
(0073) 	S_OFF;
    000CF 9AA8      SBI	0x15,0
    000D0 9AA9      SBI	0x15,1
    000D1 9AAA      SBI	0x15,2
    000D2 9AAB      SBI	0x15,3
(0074) 	btn2_count = 3;
    000D3 E083      LDI	R24,3
    000D4 E090      LDI	R25,0
    000D5 9390 007D STS	btn2_count+1,R25
    000D7 9380 007C STS	btn2_count,R24
    000D9 9159      LD	R21,Y+
    000DA 9149      LD	R20,Y+
    000DB 9508      RET
_btn2_3:
  i                    --> R22
  num                  --> R10
  ten                  --> R12
  hu                   --> R14
  th                   --> R20
    000DC D281      RCALL	push_xgsetF0FC
(0075) }
(0076) 
(0077) void btn2_3(void)
(0078) {
(0079) 	int th = 0;
(0080) 	int hu = 0;
(0081) 	int ten = 0;
(0082) 	int num = 0;
(0083) 	int i = 0;
    000DD 2766      CLR	R22
    000DE 2777      CLR	R23
(0084) 	S_OFF;
    000DF 9AA8      SBI	0x15,0
    000E0 9AA9      SBI	0x15,1
    000E1 9AAA      SBI	0x15,2
    000E2 9AAB      SBI	0x15,3
(0085) 
(0086) 	th = btn2_3_count / 1000;
    000E3 EE28      LDI	R18,0xE8
    000E4 E033      LDI	R19,3
    000E5 9100 007E LDS	R16,btn2_3_count
    000E7 9110 007F LDS	R17,btn2_3_count+1
    000E9 D234      RCALL	div16s
    000EA 01A8      MOVW	R20,R16
(0087) 	PORTD = seg[th];
    000EB E680      LDI	R24,0x60
    000EC E090      LDI	R25,0
    000ED 01FA      MOVW	R30,R20
    000EE 0FEE      LSL	R30
    000EF 1FFF      ROL	R31
    000F0 0FE8      ADD	R30,R24
    000F1 1FF9      ADC	R31,R25
    000F2 8020      LD	R2,Z
    000F3 8031      LDD	R3,Z+1
    000F4 BA22      OUT	0x12,R2
(0088) 	S_1;
    000F5 98A8      CBI	0x15,0
    000F6 9AA9      SBI	0x15,1
    000F7 9AAA      SBI	0x15,2
    000F8 9AAB      SBI	0x15,3
(0089) 	delay_ms(1);
    000F9 E001      LDI	R16,1
    000FA E010      LDI	R17,0
    000FB D0D8      RCALL	_delay_ms
(0090) 	hu = (btn2_3_count / 100) % 10;
    000FC E624      LDI	R18,0x64
    000FD E030      LDI	R19,0
    000FE 9100 007E LDS	R16,btn2_3_count
    00100 9110 007F LDS	R17,btn2_3_count+1
    00102 D21B      RCALL	div16s
    00103 E02A      LDI	R18,0xA
    00104 E030      LDI	R19,0
    00105 D214      RCALL	mod16s
    00106 0178      MOVW	R14,R16
(0091) 	PORTD = seg[hu];
    00107 E680      LDI	R24,0x60
    00108 E090      LDI	R25,0
    00109 01F7      MOVW	R30,R14
    0010A 0FEE      LSL	R30
    0010B 1FFF      ROL	R31
    0010C 0FE8      ADD	R30,R24
    0010D 1FF9      ADC	R31,R25
    0010E 8020      LD	R2,Z
    0010F 8031      LDD	R3,Z+1
    00110 BA22      OUT	0x12,R2
(0092) 	S_2;
    00111 9AA8      SBI	0x15,0
    00112 98A9      CBI	0x15,1
    00113 9AAA      SBI	0x15,2
    00114 9AAB      SBI	0x15,3
(0093) 	delay_ms(1);
    00115 E001      LDI	R16,1
    00116 E010      LDI	R17,0
    00117 D0BC      RCALL	_delay_ms
(0094) 	ten = (btn2_3_count / 10) % 10;
    00118 E02A      LDI	R18,0xA
    00119 E030      LDI	R19,0
    0011A 9100 007E LDS	R16,btn2_3_count
    0011C 9110 007F LDS	R17,btn2_3_count+1
    0011E D1FF      RCALL	div16s
    0011F E02A      LDI	R18,0xA
    00120 E030      LDI	R19,0
    00121 D1F8      RCALL	mod16s
    00122 0168      MOVW	R12,R16
(0095) 	PORTD = seg[ten];
    00123 E680      LDI	R24,0x60
    00124 E090      LDI	R25,0
    00125 01F6      MOVW	R30,R12
    00126 0FEE      LSL	R30
    00127 1FFF      ROL	R31
    00128 0FE8      ADD	R30,R24
    00129 1FF9      ADC	R31,R25
    0012A 8020      LD	R2,Z
    0012B 8031      LDD	R3,Z+1
    0012C BA22      OUT	0x12,R2
(0096) 	S_3;
    0012D 9AA8      SBI	0x15,0
    0012E 9AA9      SBI	0x15,1
    0012F 98AA      CBI	0x15,2
    00130 9AAB      SBI	0x15,3
(0097) 	delay_ms(1);
    00131 E001      LDI	R16,1
    00132 E010      LDI	R17,0
    00133 D0A0      RCALL	_delay_ms
(0098) 	num = btn2_3_count % 10;
    00134 E02A      LDI	R18,0xA
    00135 E030      LDI	R19,0
    00136 9100 007E LDS	R16,btn2_3_count
    00138 9110 007F LDS	R17,btn2_3_count+1
    0013A D1DF      RCALL	mod16s
    0013B 0158      MOVW	R10,R16
(0099) 	PORTD = seg[num];
    0013C E680      LDI	R24,0x60
    0013D E090      LDI	R25,0
    0013E 01F5      MOVW	R30,R10
    0013F 0FEE      LSL	R30
    00140 1FFF      ROL	R31
    00141 0FE8      ADD	R30,R24
    00142 1FF9      ADC	R31,R25
    00143 8020      LD	R2,Z
    00144 8031      LDD	R3,Z+1
    00145 BA22      OUT	0x12,R2
(0100) 	S_4;
    00146 9AA8      SBI	0x15,0
    00147 9AA9      SBI	0x15,1
    00148 9AAA      SBI	0x15,2
    00149 98AB      CBI	0x15,3
(0101) 	delay_ms(1);
    0014A E001      LDI	R16,1
    0014B E010      LDI	R17,0
    0014C D087      RCALL	_delay_ms
    0014D C205      RJMP	pop_xgsetF0FC
(0102) 
(0103) }
(0104) 
(0105) void btn1_fuc(void)
(0106) {
(0107) 	switch(count_num)
_btn1_fuc:
    0014E 9020 007A LDS	R2,count_num
    00150 9030 007B LDS	R3,count_num+1
    00152 01C1      MOVW	R24,R2
    00153 3081      CPI	R24,1
    00154 E0E0      LDI	R30,0
    00155 079E      CPC	R25,R30
    00156 F069      BEQ	0x0164
    00157 3082      CPI	R24,2
    00158 E0E0      LDI	R30,0
    00159 079E      CPC	R25,R30
    0015A F071      BEQ	0x0169
    0015B 3083      CPI	R24,3
    0015C E0E0      LDI	R30,0
    0015D 079E      CPC	R25,R30
    0015E F079      BEQ	0x016E
    0015F 3084      CPI	R24,4
    00160 E0E0      LDI	R30,0
    00161 079E      CPC	R25,R30
    00162 F081      BEQ	0x0173
    00163 C013      RJMP	0x0177
(0108) 	{
(0109) 		case 1 : S_1;break;
    00164 98A8      CBI	0x15,0
    00165 9AA9      SBI	0x15,1
    00166 9AAA      SBI	0x15,2
    00167 9AAB      SBI	0x15,3
    00168 C00E      RJMP	0x0177
(0110) 		case 2 : S_2;break;
    00169 9AA8      SBI	0x15,0
    0016A 98A9      CBI	0x15,1
    0016B 9AAA      SBI	0x15,2
    0016C 9AAB      SBI	0x15,3
    0016D C009      RJMP	0x0177
(0111) 		case 3 : S_3;break;
    0016E 9AA8      SBI	0x15,0
    0016F 9AA9      SBI	0x15,1
    00170 98AA      CBI	0x15,2
    00171 9AAB      SBI	0x15,3
    00172 C004      RJMP	0x0177
(0112) 		case 4 : S_4;break;
    00173 9AA8      SBI	0x15,0
    00174 9AA9      SBI	0x15,1
    00175 9AAA      SBI	0x15,2
    00176 98AB      CBI	0x15,3
    00177 9508      RET
(0113) 	}
(0114) 	
(0115) }
(0116) 
(0117) void btn1(void)
(0118) {
(0119) 	if ((1 <= count) && (count <= 8))
_btn1:
    00178 9020 0078 LDS	R2,count
    0017A 9030 0079 LDS	R3,count+1
    0017C E081      LDI	R24,1
    0017D E090      LDI	R25,0
    0017E 1628      CP	R2,R24
    0017F 0639      CPC	R3,R25
    00180 F05C      BLT	0x018C
    00181 E088      LDI	R24,0x8
    00182 1582      CP	R24,R2
    00183 0593      CPC	R25,R3
    00184 F03C      BLT	0x018C
(0120) 	{
(0121) 		PORTD = 1 << (count - 1); 
    00185 0191      MOVW	R18,R2
    00186 5021      SUBI	R18,1
    00187 4030      SBCI	R19,0
    00188 E001      LDI	R16,1
    00189 E010      LDI	R17,0
    0018A D1DE      RCALL	lsl16
    0018B BB02      OUT	0x12,R16
(0122) 	}
(0123) 	btn1_fuc();
    0018C CFC1      RJMP	_btn1_fuc
_key_scan:
    0018D 934A      ST	-Y,R20
    0018E 935A      ST	-Y,R21
(0124) }
(0125) 
(0126) void key_scan(void)
(0127) {
(0128) 	if((PINB&0x3F)!=0x3F)     //假如1~8顆按鈕有被按下去(=0) 
    0018F B386      IN	R24,0x16
    00190 738F      ANDI	R24,0x3F
    00191 338F      CPI	R24,0x3F
    00192 F409      BNE	0x0194
    00193 C035      RJMP	0x01C9
(0129) 	{ 
(0130) 	  	if((PINB&0x3F)!=0x3F)
    00194 B386      IN	R24,0x16
    00195 738F      ANDI	R24,0x3F
    00196 338F      CPI	R24,0x3F
    00197 F189      BEQ	0x01C9
(0131)         { 
(0132) 			delay_ms(20);
    00198 E104      LDI	R16,0x14
    00199 E010      LDI	R17,0
    0019A D039      RCALL	_delay_ms
(0133) 			switch(PINB)
    0019B B346      IN	R20,0x16
    0019C 2755      CLR	R21
    0019D 334B      CPI	R20,0x3B
    0019E E0E0      LDI	R30,0
    0019F 075E      CPC	R21,R30
    001A0 F039      BEQ	0x01A8
    001A1 334E      CPI	R20,0x3E
    001A2 E0E0      LDI	R30,0
    001A3 075E      CPC	R21,R30
    001A4 F009      BEQ	0x01A6
    001A5 C020      RJMP	0x01C6
(0134) 			{
(0135) 				case 0X3E:
(0136) 					timer0_open();
    001A6 D050      RCALL	_timer0_open
(0137) 				break;//S1
    001A7 C01E      RJMP	0x01C6
(0138) 				
(0139) 				case 0X3B:
(0140) 					timer0_close();
    001A8 D045      RCALL	_timer0_close
(0141) 					switch(btn2_count)
    001A9 9020 007C LDS	R2,btn2_count
    001AB 9030 007D LDS	R3,btn2_count+1
    001AD 01C1      MOVW	R24,R2
    001AE 3081      CPI	R24,1
    001AF E0E0      LDI	R30,0
    001B0 079E      CPC	R25,R30
    001B1 F049      BEQ	0x01BB
    001B2 3082      CPI	R24,2
    001B3 E0E0      LDI	R30,0
    001B4 079E      CPC	R25,R30
    001B5 F039      BEQ	0x01BD
    001B6 3083      CPI	R24,3
    001B7 E0E0      LDI	R30,0
    001B8 079E      CPC	R25,R30
    001B9 F029      BEQ	0x01BF
    001BA C00B      RJMP	0x01C6
(0142) 					{
(0143) 						case 1:btn2_1();break;
    001BB DE8A      RCALL	_btn2_1
    001BC C009      RJMP	0x01C6
(0144) 						case 2:btn2_2();break;
    001BD DED3      RCALL	_btn2_2
    001BE C007      RJMP	0x01C6
(0145) 						case 3:
(0146) 							timer2_open();
    001BF D04B      RCALL	_timer2_open
(0147) 							btn2_count = 99;
    001C0 E683      LDI	R24,0x63
    001C1 E090      LDI	R25,0
    001C2 9390 007D STS	btn2_count+1,R25
    001C4 9380 007C STS	btn2_count,R24
(0148) 						break;
(0149) 					}
(0150) 				break;//S2
(0151) 				default:break;
(0152) 			}				
(0153) 			delay_ms(1);
    001C6 E001      LDI	R16,1
    001C7 E010      LDI	R17,0
    001C8 D00B      RCALL	_delay_ms
(0154) 		}
(0155) 	}
    001C9 9159      LD	R21,Y+
    001CA 9149      LD	R20,Y+
    001CB 9508      RET
(0156) }
(0157) 
(0158) void delay_us(unsigned int microsecond) 
(0159) {      
(0160)     do 
(0161) 	{ 
(0162) 		microsecond--; 
_delay_us:
  microsecond          --> R16
    001CC 5001      SUBI	R16,1
    001CD 4010      SBCI	R17,0
(0163) 	}         
(0164)     while (microsecond>1); 
    001CE E081      LDI	R24,1
    001CF E090      LDI	R25,0
    001D0 1780      CP	R24,R16
    001D1 0791      CPC	R25,R17
    001D2 F3C8      BCS	0x01CC
    001D3 9508      RET
_delay_ms:
  millisecond          --> R20
    001D4 934A      ST	-Y,R20
    001D5 935A      ST	-Y,R21
    001D6 01A8      MOVW	R20,R16
(0165) }
(0166) 
(0167) void delay_ms(unsigned int millisecond) 
(0168) {      
    001D7 C003      RJMP	0x01DB
(0169)     while (millisecond--)
(0170) 	{
(0171) 		delay_us(999);
    001D8 EE07      LDI	R16,0xE7
    001D9 E013      LDI	R17,3
    001DA DFF1      RCALL	_delay_us
    001DB 011A      MOVW	R2,R20
    001DC 5041      SUBI	R20,1
    001DD 4050      SBCI	R21,0
    001DE 2022      TST	R2
    001DF F7C1      BNE	0x01D8
    001E0 2033      TST	R3
    001E1 F7B1      BNE	0x01D8
    001E2 9159      LD	R21,Y+
    001E3 9149      LD	R20,Y+
    001E4 9508      RET
(0172) 	}  
(0173) }
(0174) 
(0175) //I、O口初始化
(0176) void port_init(void)
(0177) {
(0178) 	DDRB  = 0XC0;
_port_init:
    001E5 EC80      LDI	R24,0xC0
    001E6 BB87      OUT	0x17,R24
(0179) 	PORTB = 0XFF;//按鈕 
    001E7 EF8F      LDI	R24,0xFF
    001E8 BB88      OUT	0x18,R24
(0180)  
(0181) 	PORTC = 0xFF;
    001E9 BB85      OUT	0x15,R24
(0182) 	DDRC  = 0xFF;
    001EA BB84      OUT	0x14,R24
(0183) 	PORTD = 0xFF;
    001EB BB82      OUT	0x12,R24
(0184) 	DDRD  = 0xFF;//七段顯示器 
    001EC BB81      OUT	0x11,R24
    001ED 9508      RET
(0185) }
(0186) 
(0187) void timer0_close(void)
(0188) {
(0189) 	CLI();
_timer0_close:
    001EE 94F8      BCLR	7
(0190)     TIMSK &= ~BIT(TOIE0);
    001EF B789      IN	R24,0x39
    001F0 7F8E      ANDI	R24,0xFE
    001F1 BF89      OUT	0x39,R24
(0191)     TCCR0 &= ~(BIT(CS02) | BIT(CS01) | BIT(CS00));
    001F2 B783      IN	R24,0x33
    001F3 7F88      ANDI	R24,0xF8
    001F4 BF83      OUT	0x33,R24
(0192)     SEI();
    001F5 9478      BSET	7
    001F6 9508      RET
(0193) }
(0194) 
(0195) void timer0_open(void)
(0196) {
(0197) 	CLI();
_timer0_open:
    001F7 94F8      BCLR	7
(0198)     TCNT0 = 0x05;
    001F8 E085      LDI	R24,5
    001F9 BF82      OUT	0x32,R24
(0199)     TIMSK |= BIT(TOIE0);
    001FA B789      IN	R24,0x39
    001FB 6081      ORI	R24,1
    001FC BF89      OUT	0x39,R24
(0200)     TCCR0 |= BIT(CS01) | BIT(CS00);
    001FD B783      IN	R24,0x33
    001FE 6083      ORI	R24,3
    001FF BF83      OUT	0x33,R24
(0201)     SEI();
    00200 9478      BSET	7
    00201 9508      RET
(0202) }
(0203) 
(0204) void timer2_close(void)
(0205) {
(0206) 	CLI();
_timer2_close:
    00202 94F8      BCLR	7
(0207)     TIMSK &= ~BIT(TOIE2);
    00203 B789      IN	R24,0x39
    00204 7B8F      ANDI	R24,0xBF
    00205 BF89      OUT	0x39,R24
(0208)     TCCR2 &= ~(BIT(CS22) | BIT(CS21) | BIT(CS20));
    00206 B585      IN	R24,0x25
    00207 7F88      ANDI	R24,0xF8
    00208 BD85      OUT	0x25,R24
(0209)     SEI();
    00209 9478      BSET	7
    0020A 9508      RET
(0210) }
(0211) 
(0212) void timer2_open(void)
(0213) {
(0214) 	CLI();
_timer2_open:
    0020B 94F8      BCLR	7
(0215)     TCNT2 = 0x83;
    0020C E883      LDI	R24,0x83
    0020D BD84      OUT	0x24,R24
(0216)     TIMSK |= BIT(TOIE2);
    0020E B789      IN	R24,0x39
    0020F 6480      ORI	R24,0x40
    00210 BF89      OUT	0x39,R24
(0217)     TCCR2 |= BIT(CS22);
    00211 B585      IN	R24,0x25
    00212 6084      ORI	R24,4
    00213 BD85      OUT	0x25,R24
(0218)     SEI();
    00214 9478      BSET	7
    00215 9508      RET
(0219) }
(0220) 
(0221) //CPU總體初始化
(0222) void init_devices(void)
(0223) {
(0224) 	CLI();
_init_devices:
    00216 94F8      BCLR	7
(0225)     port_init();
    00217 DFCD      RCALL	_port_init
(0226)     MCUCR = 0x00;
    00218 2422      CLR	R2
    00219 BE25      OUT	0x35,R2
(0227)     GICR  = 0x00;
    0021A BE2B      OUT	0x3B,R2
(0228) 	
(0229)     TIMSK = 0x00;
    0021B BE29      OUT	0x39,R2
(0230)     TCCR0 = 0x00;
    0021C BE23      OUT	0x33,R2
(0231)     TCNT0 = 0x05;
    0021D E085      LDI	R24,5
    0021E BF82      OUT	0x32,R24
(0232) 	
(0233)     TCCR2 = 0x00;
    0021F BC25      OUT	0x25,R2
(0234)     TCNT2 = 0x83;
    00220 E883      LDI	R24,0x83
    00221 BD84      OUT	0x24,R24
(0235)     SEI();
    00222 9478      BSET	7
    00223 9508      RET
_timer0_ovf_isr:
    00224 920A      ST	-Y,R0
    00225 921A      ST	-Y,R1
    00226 922A      ST	-Y,R2
    00227 923A      ST	-Y,R3
    00228 924A      ST	-Y,R4
    00229 925A      ST	-Y,R5
    0022A 926A      ST	-Y,R6
    0022B 927A      ST	-Y,R7
    0022C 928A      ST	-Y,R8
    0022D 929A      ST	-Y,R9
    0022E 930A      ST	-Y,R16
    0022F 931A      ST	-Y,R17
    00230 932A      ST	-Y,R18
    00231 933A      ST	-Y,R19
    00232 938A      ST	-Y,R24
    00233 939A      ST	-Y,R25
    00234 93AA      ST	-Y,R26
    00235 93BA      ST	-Y,R27
    00236 93EA      ST	-Y,R30
    00237 93FA      ST	-Y,R31
    00238 B60F      IN	R0,0x3F
    00239 920A      ST	-Y,R0
(0236) }
(0237) //向量值 
(0238) #pragma interrupt_handler timer0_ovf_isr:10		
(0239) void timer0_ovf_isr(void)
(0240) {    
(0241) 	TCNT0 = 0X05;
    0023A E085      LDI	R24,5
    0023B BF82      OUT	0x32,R24
(0242) 	data++;
    0023C 9180 0074 LDS	R24,data
    0023E 9190 0075 LDS	R25,data+1
    00240 9601      ADIW	R24,1
    00241 9390 0075 STS	data+1,R25
    00243 9380 0074 STS	data,R24
(0243) 	
(0244) 	if(data == 50)
    00245 3382      CPI	R24,0x32
    00246 E0E0      LDI	R30,0
    00247 079E      CPC	R25,R30
    00248 F5C9      BNE	0x0282
(0245) 	{
(0246) 		if(count == 9)
    00249 9180 0078 LDS	R24,count
    0024B 9190 0079 LDS	R25,count+1
    0024D 3089      CPI	R24,0x9
    0024E E0E0      LDI	R30,0
    0024F 079E      CPC	R25,R30
    00250 F479      BNE	0x0260
(0247) 		{
(0248) 			count = 1;
    00251 E081      LDI	R24,1
    00252 E090      LDI	R25,0
    00253 9390 0079 STS	count+1,R25
    00255 9380 0078 STS	count,R24
(0249) 			count_num += 1;
    00257 9180 007A LDS	R24,count_num
    00259 9190 007B LDS	R25,count_num+1
    0025B 9601      ADIW	R24,1
    0025C 9390 007B STS	count_num+1,R25
    0025E 9380 007A STS	count_num,R24
(0250) 		}
(0251) 		if(count_num == 5)
    00260 9180 007A LDS	R24,count_num
    00262 9190 007B LDS	R25,count_num+1
    00264 3085      CPI	R24,5
    00265 E0E0      LDI	R30,0
    00266 079E      CPC	R25,R30
    00267 F431      BNE	0x026E
(0252) 		{
(0253) 			count_num = 1;
    00268 E081      LDI	R24,1
    00269 E090      LDI	R25,0
    0026A 9390 007B STS	count_num+1,R25
    0026C 9380 007A STS	count_num,R24
(0254) 		}
(0255) 		data = 0;
    0026E 2422      CLR	R2
    0026F 2433      CLR	R3
    00270 9230 0075 STS	data+1,R3
    00272 9220 0074 STS	data,R2
(0256) 		S_OFF;
    00274 9AA8      SBI	0x15,0
    00275 9AA9      SBI	0x15,1
    00276 9AAA      SBI	0x15,2
    00277 9AAB      SBI	0x15,3
(0257) 		btn1();
    00278 DEFF      RCALL	_btn1
(0258) 		count = count + 1;
    00279 9180 0078 LDS	R24,count
    0027B 9190 0079 LDS	R25,count+1
    0027D 9601      ADIW	R24,1
    0027E 9390 0079 STS	count+1,R25
    00280 9380 0078 STS	count,R24
(0259) 	}
    00282 9009      LD	R0,Y+
    00283 BE0F      OUT	0x3F,R0
    00284 91F9      LD	R31,Y+
    00285 91E9      LD	R30,Y+
    00286 91B9      LD	R27,Y+
    00287 91A9      LD	R26,Y+
    00288 9199      LD	R25,Y+
    00289 9189      LD	R24,Y+
    0028A 9139      LD	R19,Y+
    0028B 9129      LD	R18,Y+
    0028C 9119      LD	R17,Y+
    0028D 9109      LD	R16,Y+
    0028E 9099      LD	R9,Y+
    0028F 9089      LD	R8,Y+
    00290 9079      LD	R7,Y+
    00291 9069      LD	R6,Y+
    00292 9059      LD	R5,Y+
    00293 9049      LD	R4,Y+
    00294 9039      LD	R3,Y+
    00295 9029      LD	R2,Y+
    00296 9019      LD	R1,Y+
    00297 9009      LD	R0,Y+
    00298 9518      RETI
_timer2_ovf_isf:
    00299 920A      ST	-Y,R0
    0029A 921A      ST	-Y,R1
    0029B 922A      ST	-Y,R2
    0029C 923A      ST	-Y,R3
    0029D 924A      ST	-Y,R4
    0029E 925A      ST	-Y,R5
    0029F 926A      ST	-Y,R6
    002A0 927A      ST	-Y,R7
    002A1 928A      ST	-Y,R8
    002A2 929A      ST	-Y,R9
    002A3 930A      ST	-Y,R16
    002A4 931A      ST	-Y,R17
    002A5 932A      ST	-Y,R18
    002A6 933A      ST	-Y,R19
    002A7 938A      ST	-Y,R24
    002A8 939A      ST	-Y,R25
    002A9 93AA      ST	-Y,R26
    002AA 93BA      ST	-Y,R27
    002AB 93EA      ST	-Y,R30
    002AC 93FA      ST	-Y,R31
    002AD B60F      IN	R0,0x3F
    002AE 920A      ST	-Y,R0
(0260) }
(0261) 
(0262) #pragma interrupt_handler timer2_ovf_isf:5
(0263) void timer2_ovf_isf(void)
(0264) {
(0265) 	TCNT2 = 0X05;//初值
    002AF E085      LDI	R24,5
    002B0 BD84      OUT	0x24,R24
(0266) 	data2++;
    002B1 9180 0076 LDS	R24,data2
    002B3 9190 0077 LDS	R25,data2+1
    002B5 9601      ADIW	R24,1
    002B6 9390 0077 STS	data2+1,R25
    002B8 9380 0076 STS	data2,R24
(0267) 
(0268) 	if(data2 == 500)
    002BA 3F84      CPI	R24,0xF4
    002BB E0E1      LDI	R30,1
    002BC 079E      CPC	R25,R30
    002BD F5A9      BNE	0x02F3
(0269) 	{
(0270) 		if(btn2_3_flag == 0)
    002BE 9020 0080 LDS	R2,btn2_3_flag
    002C0 9030 0081 LDS	R3,btn2_3_flag+1
    002C2 2022      TST	R2
    002C3 F441      BNE	0x02CC
    002C4 2033      TST	R3
    002C5 F431      BNE	0x02CC
(0271) 		{
(0272) 			btn2_3_flag =1;
    002C6 E081      LDI	R24,1
    002C7 E090      LDI	R25,0
    002C8 9390 0081 STS	btn2_3_flag+1,R25
    002CA 9380 0080 STS	btn2_3_flag,R24
(0273) 		}
(0274) 		data2 = 0;
    002CC 2422      CLR	R2
    002CD 2433      CLR	R3
    002CE 9230 0077 STS	data2+1,R3
    002D0 9220 0076 STS	data2,R2
(0275) 		btn2_3_count += 1;
    002D2 9180 007E LDS	R24,btn2_3_count
    002D4 9190 007F LDS	R25,btn2_3_count+1
    002D6 9601      ADIW	R24,1
    002D7 9390 007F STS	btn2_3_count+1,R25
    002D9 9380 007E STS	btn2_3_count,R24
(0276) 		if(btn2_3_count == 11)
    002DB 308B      CPI	R24,0xB
    002DC E0E0      LDI	R30,0
    002DD 079E      CPC	R25,R30
    002DE F481      BNE	0x02EF
(0277) 		{
(0278) 			btn2_3_count = 0;
    002DF 9230 007F STS	btn2_3_count+1,R3
    002E1 9220 007E STS	btn2_3_count,R2
(0279) 			btn2_count = 1;
    002E3 E081      LDI	R24,1
    002E4 E090      LDI	R25,0
    002E5 9390 007D STS	btn2_count+1,R25
    002E7 9380 007C STS	btn2_count,R24
(0280) 			btn2_3_flag = 0;
    002E9 9230 0081 STS	btn2_3_flag+1,R3
    002EB 9220 0080 STS	btn2_3_flag,R2
(0281) 			timer2_close();
    002ED DF14      RCALL	_timer2_close
(0282) 			timer0_open();
    002EE DF08      RCALL	_timer0_open
(0283) 		}	
(0284) 		S_OFF;
    002EF 9AA8      SBI	0x15,0
    002F0 9AA9      SBI	0x15,1
    002F1 9AAA      SBI	0x15,2
    002F2 9AAB      SBI	0x15,3
(0285) 	}
    002F3 9009      LD	R0,Y+
    002F4 BE0F      OUT	0x3F,R0
    002F5 91F9      LD	R31,Y+
    002F6 91E9      LD	R30,Y+
    002F7 91B9      LD	R27,Y+
    002F8 91A9      LD	R26,Y+
    002F9 9199      LD	R25,Y+
    002FA 9189      LD	R24,Y+
    002FB 9139      LD	R19,Y+
    002FC 9129      LD	R18,Y+
    002FD 9119      LD	R17,Y+
    002FE 9109      LD	R16,Y+
    002FF 9099      LD	R9,Y+
    00300 9089      LD	R8,Y+
    00301 9079      LD	R7,Y+
    00302 9069      LD	R6,Y+
    00303 9059      LD	R5,Y+
    00304 9049      LD	R4,Y+
    00305 9039      LD	R3,Y+
    00306 9029      LD	R2,Y+
    00307 9019      LD	R1,Y+
    00308 9009      LD	R0,Y+
    00309 9518      RETI
(0286) }
(0287) 
(0288) void main(void)
(0289) {
(0290) 	SREG = 0X80;
_main:
    0030A E880      LDI	R24,0x80
    0030B BF8F      OUT	0x3F,R24
(0291) 	init_devices();
    0030C DF09      RCALL	_init_devices
    0030D C00A      RJMP	0x0318
(0292) 	while(1)
(0293) 	{   
(0294) 		key_scan();
    0030E DE7E      RCALL	_key_scan
(0295) 		if(btn2_3_flag == 1)
    0030F 9180 0080 LDS	R24,btn2_3_flag
    00311 9190 0081 LDS	R25,btn2_3_flag+1
    00313 3081      CPI	R24,1
    00314 E0E0      LDI	R30,0
    00315 079E      CPC	R25,R30
    00316 F409      BNE	0x0318
(0296) 		{
(0297) 			btn2_3();
FILE: <library>
    00317 DDC4      RCALL	_btn2_3
    00318 CFF5      RJMP	0x030E
    00319 9508      RET
mod16s:
    0031A 9468      BSET	6
    0031B 92DA      ST	-Y,R13
    0031C 2ED1      MOV	R13,R17
    0031D C004      RJMP	0x0322
div16s:
    0031E 94E8      BCLR	6
    0031F 92DA      ST	-Y,R13
    00320 2ED1      MOV	R13,R17
    00321 26D3      EOR	R13,R19
    00322 FF17      SBRS	R17,7
    00323 C004      RJMP	0x0328
    00324 9510      COM	R17
    00325 9500      COM	R16
    00326 5F0F      SUBI	R16,0xFF
    00327 4F1F      SBCI	R17,0xFF
    00328 FF37      SBRS	R19,7
    00329 C004      RJMP	0x032E
    0032A 9530      COM	R19
    0032B 9520      COM	R18
    0032C 5F2F      SUBI	R18,0xFF
    0032D 4F3F      SBCI	R19,0xFF
    0032E D00B      RCALL	xdiv16u
    0032F FED7      SBRS	R13,7
    00330 C004      RJMP	0x0335
    00331 9510      COM	R17
    00332 9500      COM	R16
    00333 5F0F      SUBI	R16,0xFF
    00334 4F1F      SBCI	R17,0xFF
    00335 90D9      LD	R13,Y+
    00336 9508      RET
mod16u:
    00337 9468      BSET	6
    00338 C001      RJMP	xdiv16u
div16u:
    00339 94E8      BCLR	6
xdiv16u:
    0033A 92EA      ST	-Y,R14
    0033B 92FA      ST	-Y,R15
    0033C 938A      ST	-Y,R24
    0033D 24EE      CLR	R14
    0033E 24FF      CLR	R15
    0033F E180      LDI	R24,0x10
    00340 0F00      LSL	R16
    00341 1F11      ROL	R17
    00342 1CEE      ROL	R14
    00343 1CFF      ROL	R15
    00344 16E2      CP	R14,R18
    00345 06F3      CPC	R15,R19
    00346 F018      BCS	0x034A
    00347 1AE2      SUB	R14,R18
    00348 0AF3      SBC	R15,R19
    00349 9503      INC	R16
    0034A 958A      DEC	R24
    0034B F7A1      BNE	0x0340
    0034C F416      BRTC	0x034F
    0034D 2D0E      MOV	R16,R14
    0034E 2D1F      MOV	R17,R15
    0034F 9189      LD	R24,Y+
    00350 90F9      LD	R15,Y+
    00351 90E9      LD	R14,Y+
    00352 9508      RET
pop_xgsetF0FC:
    00353 90A9      LD	R10,Y+
    00354 90B9      LD	R11,Y+
    00355 90C9      LD	R12,Y+
    00356 90D9      LD	R13,Y+
    00357 90E9      LD	R14,Y+
    00358 90F9      LD	R15,Y+
    00359 9149      LD	R20,Y+
    0035A 9159      LD	R21,Y+
    0035B 9169      LD	R22,Y+
    0035C 9179      LD	R23,Y+
    0035D 9508      RET
push_xgsetF0FC:
    0035E 937A      ST	-Y,R23
    0035F 936A      ST	-Y,R22
push_xgset30FC:
    00360 935A      ST	-Y,R21
    00361 934A      ST	-Y,R20
push_xgset00FC:
    00362 92FA      ST	-Y,R15
    00363 92EA      ST	-Y,R14
push_xgset003C:
    00364 92DA      ST	-Y,R13
    00365 92CA      ST	-Y,R12
    00366 92BA      ST	-Y,R11
    00367 92AA      ST	-Y,R10
    00368 9508      RET
lsl16:
    00369 2322      TST	R18
    0036A F021      BEQ	0x036F
    0036B 0F00      LSL	R16
    0036C 1F11      ROL	R17
    0036D 952A      DEC	R18
    0036E CFFA      RJMP	lsl16
    0036F 9508      RET
