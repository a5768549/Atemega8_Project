#include<iom64v.h>
#include<macros.h>

#define SEG_PORT  PORTD

#define BEEL_ON   PORTB |= BIT(0);
#define BEEL_OFF  PORTB &= ~BIT(0);

#define SEG1_ON   PORTG |= BIT(0);
#define SEG1_OFF  PORTG &= ~BIT(0); 

#define SEG2_ON   PORTG |= BIT(1);
#define SEG2_OFF  PORTG &= ~BIT(1);
 
#define SEG3_ON   PORTG |= BIT(3); 
#define SEG3_OFF  PORTG &= ~BIT(3);

#define SEG4_ON   PORTG |= BIT(4); 
#define SEG4_OFF  PORTG &= ~BIT(4);


#define seg_port PORTC     //数码管数据口

#define swf4 PORTD|=BIT(0)   //关第一个数码管
#define swf3 PORTG|=BIT(3)   //关第二个数码管
#define swf2 PORTD|=BIT(1)   //关第三个数码管
#define swf1 PORTG|=BIT(4)   //关第四个数码管

#define swo4 PORTD&=~BIT(0)   //开第一个数码管
#define swo3 PORTG&=~BIT(3)   //开第二个数码管
#define swo2 PORTD&=~BIT(1)   //开第三个数码管
#define swo1 PORTG&=~BIT(4)   //开第四个数码管

//初始化 变量 声明//////////////////////////////////////////////////////////////
unsigned char cnn=0;//定时器变量
unsigned char i=0;//数码管位选用
unsigned char ad=0;//AD采集间隔
unsigned int ad_data1=0,ad_data2=0;
const unsigned char tab[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};//数码管
/******************************************************************************* 
* 函数名称: delay_us()
* 入口参数: microsecond : 输入延时微秒的时间
* 出口参数: 
* 功能描述: 微秒的延时   	  	
*******************************************************************************/ 
void delay_us(unsigned int microsecond) 
{      
    do 
	{ 
        microsecond--; 
	}         
    while (microsecond>1); 
}


/******************************************************************************* 
* 函数名称: delay_ms()
* 入口参数: millisecond : 输入延时毫秒的时间
* 出口参数: 
* 功能描述: 毫秒的延时  	
*******************************************************************************/ 
void delay_ms(unsigned int millisecond) 
{      
    while (millisecond--)
	{
        delay_us(999);
	}  
}
//I、O口初始化
void por_init(void)
{
   PORTD = 0XFF;//数码管位选数据口
   DDRD  = 0XFF;
   PORTG = 0X1B;//数码管位选数据口
   DDRG  = 0X1B;
}
///////////////////////////////////////////

//定时器0初始化
void timer0_int(void)
{
    TCCR0 =(1<<CS01) | (1<<CS00);//T0/C0  0000 0011======32分频
	 /*
	  后三位  CS02 CS01 CS00
	           0    0    0    无时钟T0/C0不工作
			   0    0    1    无分频
			   0    1    0    8分频
			   0    1    1    32分频
			   1    0    0    64分频
			   1    0    1    128分频
			   1    1    0    256分频
			   1    1    1    1024分频
	 */
	 TCNT0 = 0X05;//内部晶振，几分频算出时间初值
	 //8M 32分频  4US*5(255-5)===1000us
	 TIMSK = 0x01; //T0/C0溢出中断使能
}
///////////////////////////////////////////

//AD采集初始化
void ad_init(void)
{
}
//////////////////////////////////////////

//CPU总体初始化
void init_devices(void)
{
   por_init();
   timer0_int();
   ad_init();
   SEI();
}
unsigned int ad_cat(void)//电压采集函数
{
     unsigned int t1,t2;
	 ADMUX=0x01;//1100 0000     11:内部基准电压 0:左对齐 00000:ADC0通道
	 ACSR = 0x80;//此处加不加都可以
	 ADCSRA|=BIT(ADEN);           //使能ADC
	 ADCSRA|=BIT(ADSC);           //启动转换
	 while(!(ADCSRA&(BIT(ADIF))));//等待转换结束
     ADCSRA&=~BIT(ADIF);//ADIF在ADC转换结束后置位
     t1 = (unsigned int)ADCL;
     t2 = (unsigned int)ADCH;
     t2 = (t2<<8)+t1;
     return t2;
}
unsigned int ad_chane(unsigned int i)//电压转换函数
{
   long x;
   unsigned int y;
   x = (5000*(long)i)/1024;
   y = (unsigned int)x;
   return y;
}
//定时器0///////////////////////////////////////////////////////////////////////
#pragma interrupt_handler timer0_ovf_isr:17
void timer0_ovf_isr(void)
{    
   TCNT0 = 0X05;//内部晶振，几分频算出时间初值
   cnn++;
   if(4==cnn)//4*1ms=4ms
   {
      cnn=0;
	  ad++;
      if(25==ad)//AD采集
         {
         ad=0;
	     ad_data1=ad_cat();
		 ad_data2=ad_chane(ad_data1);
	     //PORTA^=BIT(7);//调试语句
         }
   
      PORTA ^=BIT(7);//调试语句
      switch(i++)
      {
	     case 0:swf4;swo1;seg_port=tab[ad_data2%10];break;
		 case 1:swf1;swo2;seg_port=tab[(ad_data2/10)%10];break;
		 case 2:swf2;swo3;seg_port=tab[(ad_data2/100)%10];break;
		 case 3:swf3;swo4;seg_port=tab[ad_data2/1000]|0x80;i=0;break;
		 default:i=0;break;
	  }//end of switch(i++)
   }//end of if(10==++cnn)
}//end of void timer0_ovf_isr(void)
////////////////////////////////////////////////////////////////////////////////
void main(void)
{
   init_devices();
   while(1)
   {
     
   }
}